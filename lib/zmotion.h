/********************************** ZMC??§á?????  ************************************************
**--------------??????--------------------------------------------------------------------------------
**?????: zmotion.h
**??????: ?§´??
**???: 20121008
**????: ZMCDLL ????????

**------------?????????----------------------------------------------------------------------------
** ?????:
** ??  ??:
** ?????:
** ?ºâ??:
**
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _ZMOTION_DLL_H
#define _ZMOTION_DLL_H

#define __stdcall

/*********************************************************
???????????
**********************************************************/

//???????????????
typedef unsigned long long uint64;

//???????????????
typedef long long int64;

//#define BYTE           INT8U
//#define WORD           INT16U
//#define DWORD          INT32U
typedef unsigned char BYTE;
typedef unsigned short WORD;
// typedef unsigned int  DWORD;
//#define __stdcall
typedef unsigned char uint8;   /* defined for unsigned 8-bits integer variable     ?????8¦Ë???????  */
typedef signed char int8;      /* defined for signed 8-bits integer variable        ?§Ù???8¦Ë???????  */
typedef unsigned short uint16; /* defined for unsigned 16-bits integer variable     ?????16¦Ë??????? */
typedef signed short int16;    /* defined for signed 16-bits integer variable         ?§Ù???16¦Ë??????? */
typedef unsigned int uint32;   /* defined for unsigned 32-bits integer variable     ?????32¦Ë??????? */
typedef signed int int32;      /* defined for signed 32-bits integer variable         ?§Ù???32¦Ë??????? */
typedef float fp32;            /* single precision floating point variable (32bits) ?????????????32¦Ë????? */
typedef double fp64;           /* double precision floating point variable (64bits) ????????????64¦Ë????? */
typedef unsigned int uint;     /* defined for unsigned 32-bits integer variable     ?????32¦Ë??????? */

// ????????,
enum ZMC_CONNECTION_TYPE {
  ZMC_CONNECTION_COM = 1,
  ZMC_CONNECTION_ETH = 2,
  ZMC_CONNECTION_USB = 3,
  ZMC_CONNECTION_PCI = 4,
};

//?????????
#define ZMC_DEFAULT_TIMEOUT 5000

//????????????????§»
#define ZMC_DEFAULT_TIMEOUT_COM 5000

//??????????
typedef void* ZMC_HANDLE;

/************************************************/
//?????? ?????????????????? zerror.h
/************************************************/
#define ERR_OK 0
#define ERROR_OK 0
#define ERR_SUCCESS 0

/*********************************************************
????????
**********************************************************/
enum ZBASIC_TASKSTATE {
  TASK_STATE_RUNING = 1,
  TASK_STATE_PAUSE = 3,
  TASK_STATE_STOP = 0,

  /************  ??????trio??????, ????????  ************/
  //????
  TASK_STATE_STEP = 2,
  TASK_STATE_PAUSING = 4,
  TASK_STATE_STOPING = 5,

  TASK_STATE_ERROR = 100,  //???????????ID????????, ??????????????????????????????
};

//??????
#define SYS_STATE_CANNOT_CONNECT 50  //???????

// wrapper for handle
// class Handle_Wrapper
// {
// public:
// void* handle;
// void
// }

/*********************************************************
????????
**********************************************************/

/*************************************************************
Description:    //LINUX LIB???????
Input:          //??
Output:         //
Return:         //BOOL
*************************************************************/
bool __stdcall ZMC_LinuxLibInit();

/*************************************************************
Description:    //???????????????
Input:          //??
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Open(ZMC_CONNECTION_TYPE type, char* pconnectstring, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //???????????????, ?????????????????
Input:          //??
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_FastOpen(ZMC_CONNECTION_TYPE type, char* pconnectstring, uint32 uims, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //???????????????? ??????.
Input:          //??
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_OpenCom(uint32 comid, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //?????????????????????

uint32 dwByteSize = 8, uint32 dwParity = NOPARITY, uint32 dwStopBits = ONESTOPBIT

Input:          //
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SetComDefaultBaud(uint32 dwBaudRate, uint32 dwByteSize, uint32 dwParity, uint32 dwStopBits);
/*************************************************************
Description:    //?????????????????
Input:          //??
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_PeakCom(uint32 comid, uint32 uims, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //???????????????
Input:          //IP??????????????????
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_OpenEth(char* ipaddr, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //???????????????
Input:          //IP?????32¦Ë????IP???????, ?????????
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_OpenEth2(struct in_addr straddr, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //???????????????
Input:          //PCI?????
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_OpenPci(uint32 cardnum, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //???PCI??????????
Input:          //
Output:         //
Return:         //????
*************************************************************/
uint32 __stdcall ZMC_GetMaxPciCards();

/*************************************************************
Description:    //???????????????, ???????COM??
Input:          //COM???¦¶
Output:         //??????handle
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SearchAndOpenCom(uint32 uimincomidfind, uint32 uimaxcomidfind, uint* pcomid, uint32 uims,
                                     ZMC_HANDLE* phandle);
/*************************************************************
Description:    //???????????????, ???????????. ????????
Input:          //????????
Output:         //??????handle ?????IP???
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SearchAndOpenEth(char* ipaddr, uint32 uims, ZMC_HANDLE* phandle);

/*************************************************************
Description:    //???????????????, ???????????.
Input:          //????????
Output:         //??????IP???, ??????????????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SearchEth(char* ipaddrlist, uint32 addrbufflength, uint32 uims);

/*************************************************************
Description:    //????????????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Close(ZMC_HANDLE handle);

/*************************************************************
Description:    //??????????????
Input:          //??????handle ???????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SetTimeOut(ZMC_HANDLE handle, uint32 timems);

/*************************************************************
Description:    //??????????????
Input:          //??????handle
Output:         //???????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetTimeOut(ZMC_HANDLE handle, uint32* ptimems);

/*************************************************************
Description:    //????????????????
Input:          //??????handle
Output:         //
Return:         //????? ????
*************************************************************/
float __stdcall ZMC_GetProgress(ZMC_HANDLE handle);

/*************************************************************
Description:    //????????????
Input:          //??????handle
Output:         //
Return:         //ZMC_CONNECTION_TYPE
*************************************************************/
uint8 __stdcall ZMC_GetConnectType(ZMC_HANDLE handle);

/*************************************************************
Description:    //????????????
Input:          //??????handle
Output:         //
Return:         //string
*************************************************************/
const char* __stdcall ZMC_GetConnectString(ZMC_HANDLE handle);

//??????????????????
typedef void (*PZMCAutoUpCallBack)(ZMC_HANDLE handle, int32 itypecode, int32 idatalength, uint8* pdata);

/*************************************************************
Description:    //??????????????, ????????????.
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SetAutoUpCallBack(ZMC_HANDLE handle, PZMCAutoUpCallBack pcallback);

#if 0
#endif
/***************************************************
        ZBASIC??????????????§Ò?
***************************************************/

/*************************************************************
Description:    ////???????
Input:          //??????handle
Output:         //?? ZBASIC_TASKSTATE
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetState(ZMC_HANDLE handle, uint8* pstate);

/*************************************************************
Description:    //????????????????
Input:          //??????handle
Output:         //?????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetStopPauseTaskid(ZMC_HANDLE handle, uint8* ptaskid);

/*************************************************************
Description:    ////????????????????????????
Input:          //??????handle
Output:         //
Return:         //??????????0
*************************************************************/
uint8 __stdcall ZMC_GetAxises(ZMC_HANDLE handle);

/*************************************************************
Description:    //??????????§ß??,????????????????????.  ??????????§Ý???????????
Input:          //??????handle     pszCommand????,  uimswait ?????ms???
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_ExecuteNoAck(ZMC_HANDLE handle, const char* pszCommand, uint32 uimswait);

/*************************************************************
Description:    //??????????§ß??  ??????????§Ý???????????
Input:          //??????handle  pszCommand????,    uimswait ?????ms???
Output:         //psResponse ?????????????§ß?????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Execute(ZMC_HANDLE handle, const char* pszCommand, uint32 uimswait, char* psResponse,
                            uint32 uiResponseLength);

/*************************************************************
Description:    //?????????????§ß?????????????§Ö???????. ????§Ý???????????
Input:          //??????handle  uimswait ?????ms???
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_ExecuteWaitDown(ZMC_HANDLE handle, uint32 uimaxms);

/*************************************************************
Description:    //??????????????? ????§ß???????????????.
                                ???????????
Input:          //??????handle  uimax ???á½??
Output:         //pbuff ???????????  puiread ?????????  pbifExcuteDown ????????§ß???
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_ExecuteGetReceive(ZMC_HANDLE handle, char* pbuff, uint32 uimax, uint32* puiread,
                                      uint8* pbifExcuteDown);

/*************************************************************
Description:    //???????????????????
Input:          //??????handle
Output:         //
Return:         //????? ???? - 0
*************************************************************/
uint32 __stdcall ZMC_ExecuteGetRemainBuffSpace(ZMC_HANDLE handle);

/*************************************************************
Description:    //?????????????????????, ???????,  ?????????.
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_DirectCommand(ZMC_HANDLE handle, const char* pszCommand, char* psResponse, uint32 uiResponseLength);

/*************************************************************
Description:    //???????ZAR,
Input:          //??????handle
                pZpjfilename ???????? ??¡¤??
                pZarfilename ZAR?????
                pPass ???????, ??APP_PASS  ????????pPass = NULL
                uid ???????¦·?ID?? 0-????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeZar(const char* pZpjfilename, const char* pZarfilename, const char* pPass, uint32 uid);

/*************************************************************
Description:    //???????ZAR, ??????????zpj???
Input:          //??????handle
                pzpj ???????
                pBasDir bas???????¡¤??
                pZarfilename ZAR?????
                pPass ???????, ??APP_PASS  ????????pPass = NULL
                uid ???????¦·?ID?? 0-????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeZar2(void* pzpj, const char* pBasDir, const char* pZarfilename, const char* pPass, uint32 uid);

/*************************************************************
Description:    //????????
Input:          //??????handle
                pfilename  zar?????
                pfilenameinControl  BASIC???????????????????????.
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_DownZar(ZMC_HANDLE handle, const char* pfilename, const char* pfilenameinControl);

/*************************************************************
Description:    //????????
Input:          //??????handle
                pbuffer     zar?????????§Ö???
                buffsize    zar???????
                pfilenameinControl ????????????????? , BASIC???????????????????????.
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_DownMemZar(ZMC_HANDLE handle, const char* pbuffer, uint32 buffsize, const char* pfilenameinControl);

/*************************************************************
Description:    //???§Ñ?
Input:          //??????handle
                pfilenameinControl ??????? ???NULL?????????????? , BASIC???????????????????????.
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_RunZarFile(ZMC_HANDLE handle, const char* pfilenameinControl);

/*************************************************************
Description:    //???????????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Resume(ZMC_HANDLE handle);

/*************************************************************
Description:    //?????ram??????
Input:          //??????handle
                pfilename zar?????, ??¡¤??
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_DownZarToRamAndRun(ZMC_HANDLE handle, const char* pfilename);

/*************************************************************
Description:    //???????ram??????
Input:          //??????handle
                pbuffer     zar?????????§Ö???
                buffsize    zar???????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_DownMemZarToRamAndRun(ZMC_HANDLE handle, const char* pbuffer, uint32 buffsize);

/*************************************************************
Description:    //???????ZAR?? ???????RAM????
Input:          //??????handle ?????
                pZpjfilename ???????? ??¡¤??
                pPass ???????, ??APP_PASS  ????????pPass = NULL
                uid ???????¦·?ID?? 0-????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeZarAndRamRun(ZMC_HANDLE handle, const char* pZpjfilename, const char* pPass, uint32 uid);

/*************************************************************
Description:    //???????ZAR?? ???????RAM????
Input:          //??????handle ?????
                pzpj ???????
                pBasDir bas???????¡¤??
                pPass ???????, ??APP_PASS  ????????pPass = NULL
                uid ???????¦·?ID?? 0-????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeZarAndRamRun2(ZMC_HANDLE handle, void* pzpj, const char* pBasDir, const char* pPass,
                                      uint32 uid);

/*************************************************************
Description:    //???????ZAR, ?????????????ROM
Input:          //??????handle ?????
                pZpjfilename ???????? ??¡¤??
                pPass ???????, ??APP_PASS  ????????pPass = NULL
                uid ???????¦·?ID?? 0-????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeZarAndDown(ZMC_HANDLE handle, const char* pZpjfilename, const char* pPass, uint32 uid);

/*************************************************************
Description:    //???????ZAR, ?????????????ROM
Input:          //??????handle ?????
                pzpj ???????
                pBasDir bas???????¡¤??
                pPass ???????, ??APP_PASS  ????????pPass = NULL
                uid ???????¦·?ID?? 0-????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeZarAndDown2(ZMC_HANDLE handle, void* pzpj, const char* pBasDir, const char* pPass, uint32 uid);

/*************************************************************
Description:    //????????????????ZPJ???
Input:          //pBasfilename basic?????????¡¤??
Output:         //pzpj     ??????????
                  pBasDir  BAS???¡¤?????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeOneFileZpj(void* pZpjBuff, char* pBasDir, const char* pBasfilename);

/*************************************************************
Description:    // ????zdevelop??zpj??????????????????zpj???.
Input:          // ZPJ??????????¡¤??
Output:         // pzpj     ??????????
                                pBasDir  BAS???¡¤??, ????ZAR????????.
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeMultiFileZpj(void* pZpjBuff, char* pBasDir, const char* pZpjfilename);

/*************************************************************
Description:    //ZPJ???????????, ??????????ZPJ?????????.
Input:          //pZpjfilename ??????zpj?????????¡¤??
Output:         //
                pbuffer ???ÈÉ???á½?????§³?????????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeRealZpj(const char* pZpjfilename, char* pbuffer, uint32 buffsize);

/*************************************************************
Description:    //ZPJ???????????, ??????????ZPJ?????????.
                  ?????buff????
Input:          //pBasDir basic?????¡¤??
                pzpj ???ÈÉ??????zpj????? ????????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeRealZpjMem(const char* pBasDir, void* pzpj);

/*************************************************************
Description:    //????ZLIB???
Input:          //pfilenameBas  basic ???
                pfilenameZlb    zlb ???
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_MakeZlib(const char* pfilenameBas, const char* pfilenameZlb);

/*************************************************************
Description:    //???ZLIB????????????????????????SUB??  PLC?????LBL????
Input:          //pfilenameZlb  lib?????????¡¤??
Output:         //pbuffer ???????????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetZlibGlobalDefine(const char* pfilenameZlb, char* pbuffer, uint32 buffsize);

/*************************************************************
Description:    //ZLB??BAS???????PLC???
Input:          //
Output:         //ZAR_FILETYPE  2 bas  3- plc
Return:         //
*************************************************************/
int32 __stdcall ZMC_GetZlibFileType(const char* pfilenameZlb, int* pFileType);

/*************************************************************
Description:    //???zpj??????PC?????????????
Input:          //??????handle
                pbuffer ????zpj???????? buffsize ????????
Output:         //puifilesize ?????zpj???????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_UpCurZpjToMem(ZMC_HANDLE handle, char* pbuffer, uint32 buffsize, uint32* puifilesize);

/*************************************************************
Description:    //???
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Pause(ZMC_HANDLE handle);

/*************************************************************
Description:    //??
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Stop(ZMC_HANDLE handle);

/*********************************************************
    3?????????????????.
**********************************************************/

/*************************************************************
Description:    //????????????
Input:          //??????handle ??????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Check3File(ZMC_HANDLE handle, const char* pfilenameinControl, uint8* pbIfExist, uint32* pFileSize);

/*************************************************************
Description:    //????????????????? ?????????????????????
Input:          //??????handle ??????????????????????
Output:         // ?????? ?????§³
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_FindFirst3File(ZMC_HANDLE handle, char* pfilenameinControl, uint32* pFileSize);

/*************************************************************
Description:    //????????????????? ?????????????????????
Input:          //??????handle ??????????????????????
Output:         // ?????? ?????§³
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_FindNext3File(ZMC_HANDLE handle, char* pfilenameinControl, uint32* pFileSize);

/*************************************************************
Description:    //?????????????????
Input:          //??????handle ??????????????????????
Output:         // ?????? ?????§³(????????)
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetCur3File(ZMC_HANDLE handle, char* pfilenameinControl, uint32* pFileSize);

/*************************************************************
Description:    //???????????????
Input:          //??????handle ??????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Delete3File(ZMC_HANDLE handle, const char* pfilenameinControl);

/*************************************************************
Description:    //???????????????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_RemoveAll3Files(ZMC_HANDLE handle);

/*************************************************************
Description:    //????3?????
Input:          //??????handle ?????, ??????3?????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Down3File(ZMC_HANDLE handle, const char* pfilename, const char* pfilenameinControl);

/*************************************************************
Description:    //????3?????, ?????????????strlen ????
Input:          //??????handle buff
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_DownMem3File(ZMC_HANDLE handle, const char* pbuffer, uint32 buffsize,
                                 const char* pfilenameinControl);
/*************************************************************
Description:    //???3??
Input:          //??????handle ???buff
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Up3File(ZMC_HANDLE handle, const char* pfilename, const char* pfilenameinControl);
/*************************************************************
Description:    //???3??
Input:          //??????handle ???buff ???????????????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_Up3FileToMem(ZMC_HANDLE handle, char* pbuffer, uint32 buffsize, const char* pfilenameinControl,
                                 uint32* puifilesize);

/*************************************************************
Description:    //§Õ???flash??, float????
Input:          //??????handle
                                        uiflashid 	flash???
                                        uinumes		????????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_FlashWritef(ZMC_HANDLE handle, uint16 uiflashid, uint32 uinumes, float* pfvlue);

/*************************************************************
Description:    //??????flash??, float????
Input:          //??????handle
                                        uiflashid 	flash???
                                        uibuffnum	???????????
Output:         //
                                        puinumesread ??????????????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_FlashReadf(ZMC_HANDLE handle, uint16 uiflashid, uint32 uibuffnum, float* pfvlue,
                               uint32* puinumesread);

/*************************************************************
Description:    //??????????????IP???,
Input:          //??????handle
Output:         //sIpAddr  ????IP?????  ???:??????dhcp????????IP???????????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetCurIpAddr(ZMC_HANDLE handle, char* sIpAddr);

/*************************************************************
Description:    //?????????????????????????
Input:          //??????handle
Output:         //type  ?????string_types
                  TYPE2 ??????????????????????????
                  pvalue ???????????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetStringType(ZMC_HANDLE handle, const char* sname, uint16 filenum, uint16* type, uint32* type2,
                                  double* pvalue);

enum string_types {
  STRING_USERSUB = 1,
  STRING_VARIABLE = 2,
  STRING_ARRAY = 3,
  STRING_PARA = 4,

  STRING_CMD = 5,
  STRING_KEYWORD = 6,  // AS ??????

  STRING_LOCAL = 7,  //???????

  STRING_MODULE = 8,  //???????

  STRING_UNKOWN = 10,
};

/*************************************************************
Description:    //IO??? ?????, ??????????????????????
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SetAxisEnable(ZMC_HANDLE handle, uint8 iaxis, uint8 bifenable);

/*************************************************************
Description:    //IO??? ???????
Input:          //??????handle 1- IO??
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SetOutput(ZMC_HANDLE handle, uint16 inum, uint8 iostate);

/*************************************************************
Description:    //IO??? ???????
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetIn(ZMC_HANDLE handle, uint16 inum, uint8* pistate);

/*************************************************************
Description:    //IO??? ??????
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetOutput(ZMC_HANDLE handle, uint16 inum, uint8* pistate);

typedef struct {
  uint8 m_HomeState;  //
  uint8 m_AlarmState;
  uint8 m_SDState;
  uint8 m_INPState;
  uint8 m_ElDecState;
  uint8 m_ElPlusState;
  uint8 m_HandWheelAState;
  uint8 m_HandWheelBState;
  uint8 m_EncodeAState;  //
  uint8 m_EncodeBState;  //
  uint8 m_EMGState;      //????????
  uint8 m_ClearState;    //
  uint8 m_EnableOut;

  //????????¦Ë???
  uint8 m_SoftElDecState;  // 0- ??§¹
  uint8 m_SoftElPlusState;
  uint8 m_LatchAState;  //???????
  uint8 m_LatchBState;  //???????
} struct_AxisStates;

/*************************************************************
Description:    //IO??? ???????
Input:          //??????handle
Output:         //?? struct_AxisStates
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetAxisStates(ZMC_HANDLE handle, uint8 iaxis, struct_AxisStates* pstrstates);

/*************************************************************
Description:    //IO??? ???AD
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetAIn(ZMC_HANDLE handle, uint16 inum, float* pfstate);

/*************************************************************
Description:    //IO??? ???DA
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetDaOut(ZMC_HANDLE handle, uint16 inum, float* pfstate);

/*************************************************************
Description:    //IO??? ????DA
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SetDaOut(ZMC_HANDLE handle, uint16 inum, float fstate);

/*************************************************************
Description:    //IO??? ???????
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_SetOutAll(ZMC_HANDLE handle, uint16 inumfirst, uint16 inumend, uint32 istate);

/*************************************************************
Description:    //IO??? ????????
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetInAll(ZMC_HANDLE handle, uint16 inumfirst, uint16 inumend, uint32* pistate);

/*************************************************************
Description:    //IO??? ????????
Input:          //??????handle
Output:         //??
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetOutAll(ZMC_HANDLE handle, uint16 inumfirst, uint16 inumend, uint32* pistate);

/*************************************************************
Description:    //modbus????????? ??? modbus_bit
Input:          //??????handle ????????  inum bit????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_Set0x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint8* pdata);
/*************************************************************
Description:    //modbus????????? ??? modbus_bit
Input:          //??????handle ????????  inum bit????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_Get0x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint8* pdata);

/*************************************************************
Description:    //4x?????§Õ???????????modbus_reg??§Õ
Input:          //??????handle  inum reg????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_Get4x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint16* pdata);

/*************************************************************
Description:    //4x?????§Õ???????????modbus_reg??§Õ
Input:          //??????handle  inum reg????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_Set4x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint16* pdata);

/*************************************************************
Description:    //???????????§Õ???????????modbus_ieee??§Õ
Input:          //??????handle  inum ??????????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_SetIEEE(ZMC_HANDLE handle, uint16 start, uint16 inum, float* pdata);

/*************************************************************
Description:    //???????????§Õ???????????modbus_ieee??§Õ
Input:          //??????handle  inum ??????????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_GetIEEE(ZMC_HANDLE handle, uint16 start, uint16 inum, float* pdata);

/*************************************************************
Description:    //32¦Ë?????????§Õ???????????modbus_long??§Õ
Input:          //??????handle  inum long????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_SetLong(ZMC_HANDLE handle, uint16 start, uint16 inum, float* pdata);
/*************************************************************
Description:    //32¦Ë?????????§Õ???????????modbus_long??§Õ
Input:          //??????handle  inum long????
Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_Modbus_GetLong(ZMC_HANDLE handle, uint16 start, uint16 inum, float* pdata);

/*************************************************************
Description:    // ?????????  ??¦Ã?????????200???
Input:          //??????handle ????????
                                pRegName "D" "M" "VR" "VR_INT" "V" "Z" "X" "Y" "T" "C" "DT"
                                iRegbites  0-???? "T" "C" ????

Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_RegisterRead(ZMC_HANDLE handle, const char* pRegName, uint8 iRegbites, uint32 start, uint16 inum,
                                  uint8* pdata);
/*************************************************************
Description:    // ?????????  ??¦Ã?????????200???
Input:          //??????handle ????????
                                pRegName "D" "M" "VR" "VR_INT" "V" "Z"   "Y" "T" "C" "DT"
                                iRegbites  0-???? "T" "C" ????

Output:         //
Return:         //??????
*************************************************************/
uint32 __stdcall ZMC_RegisterWrite(ZMC_HANDLE handle, const char* pRegName, uint8 iRegbites, uint32 start, uint16 inum,
                                   uint8* pdata);

/*************************************************************
Description:    //???????????????????
Input:          //???????
Output:         //
Return:         //??????
*************************************************************/
const char* ZMC_GetErrcodeDescription(int32 ierrcode);

/*************************************************************
Description:    //????????

???????

Input:          //????????????¨????1024???
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_CheckProgramSyntax(const char* pzpjfilename, char* sError);

//??????¦Ë
enum AXIS_FEATURE_BIT {
  AXIS_FEATURE_STEPPER = 0,         //  ????  ???Ùã??
  AXIS_FEATURE_STEPPER_DOUBLE = 1,  //  ???? ?????
  AXIS_FEATURE_STEPPER_AB = 2,      //  ???? A, B??

  AXIS_FEATURE_ENCODER = 4,         // ??????????????, ????,
  AXIS_FEATURE_ENCODER_PULDIR = 5,  // ???Ùã??????????
  AXIS_FEATURE_ENCODER_DOUBLE = 6,  // ??????????

  AXIS_FEATURE_ENCODER_SSI = 7,    //
  AXIS_FEATURE_ENCODER_TAMA = 8,   //
  AXIS_FEATURE_ENCODER_ENDAT = 9,  //

  AXIS_FEATURE_WITH_EZ = 10,    // ??EZ??????????????????
  AXIS_FEATURE_SERVODAC = 11,   // dac ???
  AXIS_FEATURE_STEPCODER = 12,  // ????????? ?????????????????

  AXIS_FEATURE_CANOPEN = 13,  //  ?????????????
                              // AXIS_FEATURE_ZCAN = 14, // ????????ZCAN, ???????????????????????

};

/*************************************************************
Description:    //?????????????
Input:          //??????handle
                  iaxis     ???
Output:         //pfeatures ???
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetAxisFeatures(ZMC_HANDLE handle, uint8 iaxis, uint32* pfeatures);

#define SUPPORTBIT_PLC 0
#define SUPPORTBIT_ROM 1
#define SUPPORTBIT_UDP 2  // udp??tcp???§Ö????
#define SUPPORTBIT_GCODE 3
#define SUPPORTBIT_HMI 4        //????PLC????
#define SUPPORTBIT_MODBUSUDP 5  // modbus udp ?????

typedef struct {
  //??????
  uint8 m_bIfSupportBasic;   //
  uint8 m_bIfSupportPLC;     // 0 ??????PLC????,  1, ??????ROM,  2, ??????UDP?? 3????????G????
  uint8 m_bIfSupportRamRun;  // ?????RAM????
  uint8 m_bIfLocked;         // ???LOCK

  //???????
  uint16 m_MaxVirtuAxises;
  uint8 m_MaxAxises;
  uint8 m_MaxBreakes;  // ???????
  // IO???
  uint8 m_MaxInController;
  uint8 m_MaxOutController;
  uint8 m_MaxAdController;
  uint8 m_MaxDaController;

  //?¥???
  uint32 m_MaxProgramSpaceinKB;  // ???????
  uint32 m_MaxNandSpaceinKB;
  uint32 m_MaxNandSpaceRemaininKB;  //??????

  // modbus????????
  uint16 m_MaxModbusBits;
  uint16 m_MaxModbusRegs;

  //?????BASIC???
  uint16 m_MaxFiles;  //?????????????
  uint8 m_Max3Files;
  // uint8   m_bIfSupport3File; // 3?????.
  uint8 m_bReserve;

  // trio????
  uint32 m_MaxTable;
  uint32 m_MaxVr;

  uint16 m_MaxTaskes;   //????????
  uint16 m_MaxTimeres;  //???TIMES??

  uint16 m_MaxVarNum;    //    ??????
  uint16 m_MaxArrayNum;  //

  uint32 m_MaxArraySpace;  //

  uint16 m_MaxSubes;  //
  // uint16  m_MaxStackes; //      ???????
  uint8 m_MaxStackes;  //   ???8¦Ë
  uint8 m_MaxScopes;   //??????????

  // uint16  m_MaxExpressionLayeres; //  ??????????
  uint8 m_MaxExpressionLayeres;
  uint8 m_Reserve81;

  // uint16  m_MaxLabelChares;  //?????????
  uint8 m_MaxLabelChares;
  uint8 m_Reserve82;  //???

} struct_SysMaxSpecification;

/*************************************************************
Description:    //????????????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_GetSysSpecification(ZMC_HANDLE handle, struct_SysMaxSpecification* pspeci);

/*************************************************************
Description:    //??????????????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_ReadMessage(ZMC_HANDLE handle, char* pbuff, uint32 uimax, uint32* puiread);

/*************************************************************
Description:    //???????
Input:          //
// ????????
enum ZBASIC_STEPMODE
{
    STEP_MODE_NONE = 0,
    STEP_MODE_IN = 1,  // ????????
    STEP_MODE_NEXT = 2,  // ???? ?????
    STEP_MODE_OUT = 3,  // ???? ???
    STEP_MODE_SPECIALLINE = 4,  // ???? ?????
};
                                ifilenum:????§Ö???????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_StepRun(ZMC_HANDLE handle, uint16 taskid, uint8 Stepmode, uint8 bifBreakAll, uint8 ifilenum,
                            uint32 iLineNum);

enum ZBASIC_STEPMODE {
  STEP_MODE_NONE = 0,
  STEP_MODE_IN = 1,           // ????????
  STEP_MODE_NEXT = 2,         // ???? ?????
  STEP_MODE_OUT = 3,          // ???? ???
  STEP_MODE_SPECIALLINE = 4,  // ???? ?????
};

typedef struct {
  //???ID
  uint32 m_hardid;

  uint16 m_cardid;  // ???????

  //
  uint8 m_imaxin;
  uint8 m_imaxout;
  uint8 m_imaxad;
  uint8 m_imaxda;

  //????????0???????
  uint8 m_iAxises;

} struct_ChildCardInfo;

/*************************************************************
Description:    //????????????§Ö?????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_CancelOnline(ZMC_HANDLE handle);

/*************************************************************
Description:    //???, LIB??????ÖÎ????????.
Input:          //??????handle ?§Ü? ??0 ??????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_BreakAdd(ZMC_HANDLE handle, const char* filenamenoext, uint32 ilinenum, uint8 bifPauseAll);

/*************************************************************
Description:    //???, LIB??????ÖÎ????????.
Input:          //??????handle ?§Ü? ??0 ??????
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_BreakDel(ZMC_HANDLE handle, const char* filenamenoext, uint32 ilinenum);

/*************************************************************
Description:    //??????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_BreakClear(ZMC_HANDLE handle);

/*************************************************************
Description:    //??????????
Input:          //??????handle
Output:         // ????????? ???????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_ArrayWritef(ZMC_HANDLE handle, char* sname, uint32 uistartIndex, uint32 uinumes, float* pfValue);
/*************************************************************
Description:    //?????????
Input:          //??????handle
Output:         // ????????? ???????
Return:         //??????
*************************************************************/
int32 __stdcall ZMC_ArrayReadf(ZMC_HANDLE handle, char* sname, uint32 uistartIndex, uint32 uinumes, float* pfValue);

#endif

#ifdef __cplusplus
}
#endif
